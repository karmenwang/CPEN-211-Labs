
C:/Users/rbot2/OneDrive/Documents/UBCENG/Y2T1/CPEN 211/lab11/lab11part3.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
	.text
	.global _start
_start:
	BL CONFIG_VIRTUAL_MEMORY
   0:	eb00009e 	bl	280 <CONFIG_VIRTUAL_MEMORY>
									// Step 1-3: configure PMN0 to count cycles
	MOV R0, #0						// Write 0 into R0 then PMSELR
   4:	e3a00000 	mov	r0, #0
	MCR p15, 0, R0, c9, c12, 5		// Write 0 into PMSELR selects PMN0
   8:	ee090fbc 	mcr	15, 0, r0, cr9, cr12, {5}
	MOV R1, #0x3					// Event 0x3 is L1 cache misses
   c:	e3a01003 	mov	r1, #3
	MCR p15, 0, R1, c9, c13, 1		// Write 0x11 into PMXEVTYPER (PMN0 measure CPU cycles)
  10:	ee091f3d 	mcr	15, 0, r1, cr9, cr13, {1}

	MOV R0, #1						// Write 1 into R0 then PMSELR
  14:	e3a00001 	mov	r0, #1
	MCR p15, 0, R0, c9, c12, 5		// Write 0 into PMSELR selects PMN0
  18:	ee090fbc 	mcr	15, 0, r0, cr9, cr12, {5}
	MOV R1, #0x6					// Event 0x6 is Total Loads
  1c:	e3a01006 	mov	r1, #6
	MCR p15, 0, R1, c9, c13, 1		// Write 0x11 into PMXEVTYPER (PMN0 measure CPU cycles)
  20:	ee091f3d 	mcr	15, 0, r1, cr9, cr13, {1}

	MOV R0, #2						// Write 2 into R0 then PMSELR
  24:	e3a00002 	mov	r0, #2
	MCR p15, 0, R0, c9, c12, 5		// Write 0 into PMSELR selects PMN0
  28:	ee090fbc 	mcr	15, 0, r0, cr9, cr12, {5}
	MOV R1, #0x11					// Event 0x11 is CPU cycles
  2c:	e3a01011 	mov	r1, #17
	MCR p15, 0, R1, c9, c13, 1		// Write 0x11 into PMXEVTYPER (PMN0 measure CPU cycles)
  30:	ee091f3d 	mcr	15, 0, r1, cr9, cr13, {1}

									// Step 4: enable PMN0
	mov R0, #0b111					// PMN0-2 is bit 0-2 of PMCNTENSET
  34:	e3a00007 	mov	r0, #7
	MCR p15, 0, R0, c9, c12, 1 // Setting bit 0 of PMCNTENSET enables PMN0
  38:	ee090f3c 	mcr	15, 0, r0, cr9, cr12, {1}

									// Step 5: clear all counters and start counters
	mov r0, #3						// bits 0 (start counters) and 1 (reset counters)
  3c:	e3a00003 	mov	r0, #3
	MCR p15, 0, r0, c9, c12, 0		// Setting PMCR to 3
  40:	ee090f1c 	mcr	15, 0, r0, cr9, cr12, {0}


																								//begin function
	LDR R0, =128					//R0 = N
  44:	e3a00080 	mov	r0, #128	; 0x80
	LDR R7, =32						//R7 = BLOCKSIZE
  48:	e3a07020 	mov	r7, #32
	MOV R1, #0						//R1 = i
  4c:	e3a01000 	mov	r1, #0
	MOV R2, #0						//R2 = j
  50:	e3a02000 	mov	r2, #0
	MOV R3, #0						//R3 = k
  54:	e3a03000 	mov	r3, #0
									//R4 = sj	R11 = si		R6 = sk
	LDR R8, =A						//R8 = address of A
  58:	e59f8214 	ldr	r8, [pc, #532]	; 274 <Checkarray+0x48>
	LDR R9, =B						//R9 = address of B
  5c:	e59f9214 	ldr	r9, [pc, #532]	; 278 <Checkarray+0x4c>
	LDR R10, =C						//R10 = address of C
  60:	e59fa214 	ldr	r10, [pc, #532]	; 27c <Checkarray+0x50>

00000064 <dgemm>:

dgemm:
	MOV R4, #0						//sj = 0
  64:	e3a04000 	mov	r4, #0

00000068 <dgemmsj>:
dgemmsj:
	MOV R11, #0						//si = 0
  68:	e3a0b000 	mov	r11, #0

0000006c <dgemmsi>:
dgemmsi:
	MOV R6, #0						//sk = 0
  6c:	e3a06000 	mov	r6, #0

00000070 <dgemmsk>:
dgemmsk:
	B Function
  70:	ea000009 	b	9c <BIGLOOP>

00000074 <continue>:
continue:
	ADD R6, R6, R7
  74:	e0866007 	add	r6, r6, r7
	CMP R6, R0
  78:	e1560000 	cmp	r6, r0
	BLT dgemmsk
  7c:	bafffffb 	blt	70 <dgemmsk>

	ADD R11, R11, R7
  80:	e08bb007 	add	r11, r11, r7
	CMP R11, R0
  84:	e15b0000 	cmp	r11, r0
	BLT dgemmsi
  88:	bafffff7 	blt	6c <dgemmsi>

	ADD R4, R4, R7
  8c:	e0844007 	add	r4, r4, r7
	CMP R4, R0
  90:	e1540000 	cmp	r4, r0
	BLT dgemmsj
  94:	bafffff3 	blt	68 <dgemmsj>
	B STOPALL
  98:	ea000021 	b	124 <STOPALL>

0000009c <BIGLOOP>:


Function:
BIGLOOP:
	MOV R2, #0
  9c:	e3a02000 	mov	r2, #0

000000a0 <MIDLOOP>:

MIDLOOP:
	MOV R3, #0						//k = 0
  a0:	e3a03000 	mov	r3, #0
	STR R3, [sp,#-8]				//store 0 for use
  a4:	e50d3008 	str	r3, [sp, #-8]
  a8:	ed1d0b08 	.word	0xed1d0b08

000000ac <INNERLOOP>:
	.word 0xED1D0B08				//FLDD D0, [sp,#-8]		//D0 = 0 

INNERLOOP:
	MUL R5, R0, R1					//R5 = N*i
  ac:	e0050190 	mul	r5, r0, r1
	ADD R5, R5,	R3					//R5 = N*i + k
  b0:	e0855003 	add	r5, r5, r3
	MOV R5, R5, LSL #3				//make it an address
  b4:	e1a05185 	lsl	r5, r5, #3
	ADD R5, R5, R8					//R5 = N*i + k + A
  b8:	e0855008 	add	r5, r5, r8
  bc:	ed152b00 	.word	0xed152b00
//  1110_1101_0_001_0101_0010_1011_00000000
	.word 0xED152B00				//FLDD D2, [R5]			//D2 = A[i][k]
	MUL R5, R0, R3					//R5 = N*k
  c0:	e0050390 	mul	r5, r0, r3
	ADD R5, R5,	R2					//R5 = N*k + j
  c4:	e0855002 	add	r5, r5, r2
	MOV R5, R5, LSL #3				//convert shift to address
  c8:	e1a05185 	lsl	r5, r5, #3
	ADD R5, R5, R9					//R5 = N*k + j + B
  cc:	e0855009 	add	r5, r5, r9
  d0:	ed153b00 	.word	0xed153b00
  d4:	ee221b03 	.word	0xee221b03
  d8:	ee300b01 	.word	0xee300b01
//  1110_11100010_0010_0001_1011_0000_0011
	.word 0xEE221B03				//FMULD D1, D2, D3		//D1 = A*B
//  1110_11100011_0000_0000_1011_0000_0001
	.word 0xEE300B01				//FADDD D0, D0, D1		//sum = sum + (A[ij]*B[kj])

	ADD R3, R3, #1					//k++
  dc:	e2833001 	add	r3, r3, #1
	ADD R12, R6, R7					//sk+BLOCKSIZE
  e0:	e086c007 	add	r12, r6, r7
	CMP R3, R12						//k<sk+BLOCKSIZE
  e4:	e153000c 	cmp	r3, r12
	BLT INNERLOOP
  e8:	baffffef 	blt	ac <INNERLOOP>

	MUL R5, R0, R1					//R5 = N*i
  ec:	e0050190 	mul	r5, r0, r1
	ADD R5, R5,	R2					//R5 = N*i + j
  f0:	e0855002 	add	r5, r5, r2
	MOV R5, R5, LSL #3				//convert shift to address
  f4:	e1a05185 	lsl	r5, r5, #3
	ADD R5, R5, R10					//R5 = N*i + j + C
  f8:	e085500a 	add	r5, r5, r10
  fc:	ed050b00 	.word	0xed050b00
//  1110_1101_0_000_0101_0000_1011_00000000
	.word 0xED050B00				//FSTD D0, [R5]			//C[i][j] = sum

	ADD R2, R2, #1					//j++
 100:	e2822001 	add	r2, r2, #1
	ADD R12, R4, R7					//sj+BLOCKSIZE
 104:	e084c007 	add	r12, r4, r7
	CMP R2, R12						//j<sj+BLOCKSIZE
 108:	e152000c 	cmp	r2, r12
	BLT MIDLOOP
 10c:	baffffe3 	blt	a0 <MIDLOOP>

	ADD R1, R1, #1
 110:	e2811001 	add	r1, r1, #1
	ADD R12, R11, R7				//si+BLOCKSIZE
 114:	e08bc007 	add	r12, r11, r7
	CMP R1, R12						//j<sj+BLOCKSIZE
 118:	e151000c 	cmp	r1, r12
	BLT BIGLOOP
 11c:	baffffde 	blt	9c <BIGLOOP>
	B continue
 120:	eaffffd3 	b	74 <continue>

00000124 <STOPALL>:

																								//end function
STOPALL:
									// Step 7: stop counters
	mov r0, #0
 124:	e3a00000 	mov	r0, #0
	MCR p15, 0, r0, c9, c12, 0		// Write 0 to PMCR to stop counters
 128:	ee090f1c 	mcr	15, 0, r0, cr9, cr12, {0}

									// Step 8-10: Select PMN0 and read out result into R3
	mov r0, #0						// PMN0
 12c:	e3a00000 	mov	r0, #0
	MCR p15, 0, R0, c9, c12, 5		// Write 0 to PMSELR
 130:	ee090fbc 	mcr	15, 0, r0, cr9, cr12, {5}
	MRC p15, 0, R3, c9, c13, 2		// Read PMXEVCNTR into R3
 134:	ee193f5d 	mrc	15, 0, r3, cr9, cr13, {2}

									// Step 8-10: Select PMN0 and read out result into R3
	mov r0, #1						// PMN1
 138:	e3a00001 	mov	r0, #1
	MCR p15, 0, R0, c9, c12, 5		// Write 1 to PMSELR
 13c:	ee090fbc 	mcr	15, 0, r0, cr9, cr12, {5}
	MRC p15, 0, R4, c9, c13, 2		// Read PMXEVCNTR into R4
 140:	ee194f5d 	mrc	15, 0, r4, cr9, cr13, {2}

									// Step 8-10: Select PMN0 and read out result into R3
	mov r0, #2						// PMN2
 144:	e3a00002 	mov	r0, #2
	MCR p15, 0, R0, c9, c12, 5		// Write 2 to PMSELR
 148:	ee090fbc 	mcr	15, 0, r0, cr9, cr12, {5}
	MRC p15, 0, R5, c9, c13, 2		// Read PMXEVCNTR into R5
 14c:	ee195f5d 	mrc	15, 0, r5, cr9, cr13, {2}

00000150 <end>:
end: 
	b end // wait here
 150:	eafffffe 	b	150 <end>

00000154 <A>:
 154:	9999999a 	.word	0x9999999a
 158:	40019999 	.word	0x40019999
 15c:	00000000 	.word	0x00000000
 160:	3ff00000 	.word	0x3ff00000
 164:	66666666 	.word	0x66666666
 168:	400a6666 	.word	0x400a6666
 16c:	33333333 	.word	0x33333333
 170:	40033333 	.word	0x40033333
 174:	33333333 	.word	0x33333333
 178:	3ff33333 	.word	0x3ff33333
 17c:	00000000 	.word	0x00000000
 180:	3fe00000 	.word	0x3fe00000
 184:	00000000 	.word	0x00000000
 188:	3ff00000 	.word	0x3ff00000
 18c:	cccccccd 	.word	0xcccccccd
 190:	3ff4cccc 	.word	0x3ff4cccc
 194:	00000000 	.word	0x00000000
 198:	40000000 	.word	0x40000000

0000019c <B>:
 19c:	9999999a 	.word	0x9999999a
 1a0:	40099999 	.word	0x40099999
 1a4:	00000000 	.word	0x00000000
 1a8:	3ff80000 	.word	0x3ff80000
 1ac:	33333333 	.word	0x33333333
 1b0:	40213333 	.word	0x40213333
 1b4:	33333333 	.word	0x33333333
 1b8:	40113333 	.word	0x40113333
 1bc:	66666666 	.word	0x66666666
 1c0:	3fe66666 	.word	0x3fe66666
 1c4:	cccccccd 	.word	0xcccccccd
 1c8:	3feccccc 	.word	0x3feccccc
 1cc:	cccccccd 	.word	0xcccccccd
 1d0:	3ff4cccc 	.word	0x3ff4cccc
 1d4:	9999999a 	.word	0x9999999a
 1d8:	40019999 	.word	0x40019999
 1dc:	00000000 	.word	0x00000000
 1e0:	40080000 	.word	0x40080000

000001e4 <C>:
	...

0000022c <Checkarray>:
 22c:	5c28f5c3 	.word	0x5c28f5c3
 230:	402f428f 	.word	0x402f428f
 234:	b851eb85 	.word	0xb851eb85
 238:	4026851e 	.word	0x4026851e
 23c:	eb851eb8 	.word	0xeb851eb8
 240:	403db851 	.word	0x403db851
 244:	47ae147b 	.word	0x47ae147b
 248:	402afae1 	.word	0x402afae1
 24c:	c28f5c29 	.word	0xc28f5c29
 250:	401628f5 	.word	0x401628f5
 254:	eb851eb8 	.word	0xeb851eb8
 258:	40373851 	.word	0x40373851
 25c:	147ae148 	.word	0x147ae148
 260:	4026c7ae 	.word	0x4026c7ae
 264:	a3d70a3d 	.word	0xa3d70a3d
 268:	401b3d70 	.word	0x401b3d70
 26c:	70a3d70a 	.word	0x70a3d70a
 270:	402f8a3d 	.word	0x402f8a3d
 274:	00000154 	.word	0x00000154
 278:	0000019c 	.word	0x0000019c
 27c:	000001e4 	.word	0x000001e4

00000280 <CONFIG_VIRTUAL_MEMORY>:
      .equ  TRANS_TABLE_N, 0
      .equ  SECTION_SIZE, 0x100000

      .global CONFIG_VIRTUAL_MEMORY
CONFIG_VIRTUAL_MEMORY:
      PUSH {R4-R9}
 280:	e92d03f0 	push	{r4, r5, r6, r7, r8, r9}

      /* Verify System Control Register contents */
      MRC p15, 0, R0, c1, c0, 0 /* Read SCTLR into Rt */
 284:	ee110f10 	mrc	15, 0, r0, cr1, cr0, {0}
      LDR R1, =0x00C5187A
 288:	e59f10a8 	ldr	r1, [pc, #168]	; 338 <CPT_RETURN+0x8>
      CMP R0, R1
 28c:	e1500001 	cmp	r0, r1
      BNE CPT_ERROR
 290:	1a000025 	bne	32c <CPT_ERROR>

      LDR R6, =0x100000 /* address to try to read after MMU configured */
 294:	e3a06601 	mov	r6, #1048576	; 0x100000
      LDR R7, [R6]      /* R7 is contents of word at physical address 0x100000 */
 298:	e5967000 	ldr	r7, [r6]
      LDR R8, =0x200000 /* address to try to read after MMU configured */
 29c:	e3a08602 	mov	r8, #2097152	; 0x200000
      LDR R9, [R8]      /* R9 has contents of word at physical address 0x200000 */
 2a0:	e5989000 	ldr	r9, [r8]

      /* initialize level 1 translation table */
               /*1111111111          */
               /*98765432109876543210*/
      LDR R1, =0b10000001110000001110    /* lower 20 bits of section descriptor for cacheable sections */
 2a4:	e59f1090 	ldr	r1, [pc, #144]	; 33c <CPT_RETURN+0xc>
      LDR R2, =0b10000000110000000010    /* lower 20 bits of section descriptor for device sections */
 2a8:	e59f2090 	ldr	r2, [pc, #144]	; 340 <CPT_RETURN+0x10>
      LDR R3, =SECTION_SIZE
 2ac:	e3a03601 	mov	r3, #1048576	; 0x100000
      LDR R4, =TRANS_TABLE_0_BASE
 2b0:	e3a04201 	mov	r4, #268435456	; 0x10000000
      MOV R0, #0  /* loop counter */
 2b4:	e3a00000 	mov	r0, #0

000002b8 <CPT_L1>:
CPT_L1: 
      MUL   R5, R0, R3                     /* physical address of section */
 2b8:	e0050390 	mul	r5, r0, r3
      CMP   R0, #UNCACHABLE_START 
 2bc:	e3500b01 	cmp	r0, #1024	; 0x400
      ORRLT R5, R5, R1
 2c0:	b1855001 	orrlt	r5, r5, r1
      ORRGE R5, R5, R2
 2c4:	a1855002 	orrge	r5, r5, r2
      STR   R5, [R4, R0, LSL #2]
 2c8:	e7845100 	str	r5, [r4, r0, lsl #2]
      ADD   R0, R0, #1
 2cc:	e2800001 	add	r0, r0, #1
      CMP   R0, #0x1000
 2d0:	e3500a01 	cmp	r0, #4096	; 0x1000
      BLT   CPT_L1
 2d4:	bafffff7 	blt	2b8 <CPT_L1>

      /* for testing address translation: remap second two pages */
      ADD R5, R1, R3
 2d8:	e0815003 	add	r5, r1, r3
      STR R5, [R4, #8]  /* virtual page 2 => physical page 1 */
 2dc:	e5845008 	str	r5, [r4, #8]
      ADD R5, R1, R3, LSL #1
 2e0:	e0815083 	add	r5, r1, r3, lsl #1
      STR R5, [R4, #4]  /* virtual page 1 => physical page 2 */
 2e4:	e5845004 	str	r5, [r4, #4]

      /* set Translation Table Base Control Register */
      MOV R0, #TRANS_TABLE_N
 2e8:	e3a00000 	mov	r0, #0
      MCR p15, 0, R0, c2, c0, 2 /* TTBCR.N = 0 */
 2ec:	ee020f50 	mcr	15, 0, r0, cr2, cr0, {2}

      /* set Translation Table Base Register 0 */
      LDR R0,=TRANS_TABLE_0_BASE 
 2f0:	e3a00201 	mov	r0, #268435456	; 0x10000000
      MCR p15, 0, R0, c2, c0, 0 /* TTBR0 = TRANS_TABLE_0_BASE */
 2f4:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}

      /* set Domain Access Control Register */
      MOV R0, #1
 2f8:	e3a00001 	mov	r0, #1
      MCR p15, 0, R0, c3, c0, 0 /* Domain 0 is client */
 2fc:	ee030f10 	mcr	15, 0, r0, cr3, cr0, {0}

      /* set Context ID Register */
      MOV R0, #0
 300:	e3a00000 	mov	r0, #0
      MCR p15, 0, R0, c13, c0, 1 /* PROCID = 0, ACID = 0 */
 304:	ee0d0f30 	mcr	15, 0, r0, cr13, cr0, {1}

      /* enable data cache and MMU */
      MRC p15, 0, R0, c1, c0, 0 /* Read SCTLR into Rt */
 308:	ee110f10 	mrc	15, 0, r0, cr1, cr0, {0}
      ORR R0, R0, #0b101
 30c:	e3800005 	orr	r0, r0, #5
      MCR p15, 0, R0, c1, c0, 0 /* Write Rt to SCTLR */ 
 310:	ee010f10 	mcr	15, 0, r0, cr1, cr0, {0}

      ISB
 314:	f57ff06f 	isb	sy

      LDR   R1, [R6] /* R1 has contents of memory at virtual address 0x100000 
 318:	e5961000 	ldr	r1, [r6]
                        which should be physical address 0x200000 */

      CMP   R1, R9   /* R1 should match R9 if address translation worked */
 31c:	e1510009 	cmp	r1, r9
      BNE   CPT_ERROR 
 320:	1a000001 	bne	32c <CPT_ERROR>

      MOV   R0, #0
 324:	e3a00000 	mov	r0, #0
      B     CPT_RETURN
 328:	ea000000 	b	330 <CPT_RETURN>

0000032c <CPT_ERROR>:
CPT_ERROR:
      MOV   R0, #1
 32c:	e3a00001 	mov	r0, #1

00000330 <CPT_RETURN>:
CPT_RETURN:
      POP   {R4-R9}
 330:	e8bd03f0 	pop	{r4, r5, r6, r7, r8, r9}
      BX    LR
 334:	e12fff1e 	bx	lr
 338:	00c5187a 	.word	0x00c5187a
 33c:	00081c0e 	.word	0x00081c0e
 340:	00080c02 	.word	0x00080c02
