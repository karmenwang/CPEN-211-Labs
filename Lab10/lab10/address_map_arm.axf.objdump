
C:/Users/rbot2/OneDrive/Documents/UBCENG/Y2T1/CPEN 211/lab10/address_map_arm.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	ea00007a 	b	1f0 <_start>
   4:	ea0000ac 	b	2bc <SERVICE_UND>
   8:	ea0000ac 	b	2c0 <SERVICE_SVC>
   c:	ea0000ad 	b	2c8 <SERVICE_ABT_INST>
  10:	ea0000ab 	b	2c4 <SERVICE_ABT_DATA>
  14:	00000000 	.word	0x00000000
  18:	ea0000ab 	b	2cc <SERVICE_IRQ>
  1c:	ea0000ff 	b	420 <SERVICE_FIQ>

Disassembly of section .text:

00000040 <CONFIG_GIC>:
/* 
 * Configure the Generic Interrupt Controller (GIC)
*/
				.global	CONFIG_GIC
CONFIG_GIC:
				PUSH		{LR}
  40:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    			/* To configure the FPGA KEYS interrupt (ID 73):
				 *	1. set the target to cpu0 in the ICDIPTRn register
				 *	2. enable the interrupt in the ICDISERn register */
				/* CONFIG_INTERRUPT (int_ID (R0), CPU_target (R1)); */
    			MOV		R0, #73					// KEY port (interrupt ID = 73)
  44:	e3a00049 	mov	r0, #73	; 0x49
    			MOV		R1, #1					// this field is a bit-mask; bit 0 targets cpu0
  48:	e3a01001 	mov	r1, #1
    			BL			CONFIG_INTERRUPT
  4c:	eb00000d 	bl	88 <CONFIG_INTERRUPT>
																											//new additions
				/* CONFIG_INTERRUPT (int_ID (R0), CPU_target (R1)); */
    			MOV		R0, #80					// KEY port (interrupt ID = 80)
  50:	e3a00050 	mov	r0, #80	; 0x50
    			MOV		R1, #1					// this field is a bit-mask; bit 0 targets cpu0
  54:	e3a01001 	mov	r1, #1
    			BL			CONFIG_INTERRUPT
  58:	eb00000a 	bl	88 <CONFIG_INTERRUPT>

				/* CONFIG_INTERRUPT (int_ID (R0), CPU_target (R1)); */
    			MOV		R0, #29					// KEY port (interrupt ID = 29)
  5c:	e3a0001d 	mov	r0, #29
    			MOV		R1, #1					// this field is a bit-mask; bit 0 targets cpu0
  60:	e3a01001 	mov	r1, #1
    			BL			CONFIG_INTERRUPT
  64:	eb000007 	bl	88 <CONFIG_INTERRUPT>

				/* configure the GIC CPU interface */
    			LDR		R0, =MPCORE_GIC_CPUIF	// base address of CPU interface
  68:	e59f0060 	ldr	r0, [pc, #96]	; d0 <HPS_WATCHDOG1_IRQ+0x4>
    			/* Set Interrupt Priority Mask Register (ICCPMR) */
    			LDR		R1, =0xFFFF 			// enable interrupts of all priorities levels
  6c:	e59f1060 	ldr	r1, [pc, #96]	; d4 <HPS_WATCHDOG1_IRQ+0x8>
    			STR		R1, [R0, #ICCPMR]
  70:	e5801004 	str	r1, [r0, #4]
    			/* Set the enable bit in the CPU Interface Control Register (ICCICR). This bit
				 * allows interrupts to be forwarded to the CPU(s) */
    			MOV		R1, #1
  74:	e3a01001 	mov	r1, #1
    			STR		R1, [R0]
  78:	e5801000 	str	r1, [r0]
    
    			/* Set the enable bit in the Distributor Control Register (ICDDCR). This bit
				 * allows the distributor to forward interrupts to the CPU interface(s) */
    			LDR		R0, =MPCORE_GIC_DIST
  7c:	e59f0054 	ldr	r0, [pc, #84]	; d8 <HPS_WATCHDOG1_IRQ+0xc>
    			STR		R1, [R0]    
  80:	e5801000 	str	r1, [r0]
    
    			POP     	{PC}
  84:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00000088 <CONFIG_INTERRUPT>:
 * other registers in the GIC
 * Arguments: R0 = interrupt ID, N
 *            R1 = CPU target
*/
CONFIG_INTERRUPT:
    			PUSH		{R4-R5, LR}
  88:	e92d4030 	push	{r4, r5, lr}
    
    			/* Configure Interrupt Set-Enable Registers (ICDISERn). 
				 * reg_offset = (integer_div(N / 32) * 4
				 * value = 1 << (N mod 32) */
    			LSR		R4, R0, #3							// calculate reg_offset
  8c:	e1a041a0 	lsr	r4, r0, #3
    			BIC		R4, R4, #3							// R4 = reg_offset
  90:	e3c44003 	bic	r4, r4, #3
				LDR		R2, =MPCORE_GIC_DIST+ICDISER
  94:	e59f2040 	ldr	r2, [pc, #64]	; dc <HPS_WATCHDOG1_IRQ+0x10>
				ADD		R4, R2, R4							// R4 = address of ICDISER
  98:	e0824004 	add	r4, r2, r4
    
    			AND		R2, R0, #0x1F   					// N mod 32
  9c:	e200201f 	and	r2, r0, #31
				MOV		R5, #1								// enable
  a0:	e3a05001 	mov	r5, #1
    			LSL		R2, R5, R2							// R2 = value
  a4:	e1a02215 	lsl	r2, r5, r2

				/* now that we have the register address (R4) and value (R2), we need to set the
				 * correct bit in the GIC register */
    			LDR		R3, [R4]								// read current register value
  a8:	e5943000 	ldr	r3, [r4]
    			ORR		R3, R3, R2							// set the enable bit
  ac:	e1833002 	orr	r3, r3, r2
    			STR		R3, [R4]								// store the new register value
  b0:	e5843000 	str	r3, [r4]

    			/* Configure Interrupt Processor Targets Register (ICDIPTRn)
     			 * reg_offset = integer_div(N / 4) * 4
     			 * index = N mod 4 */
    			BIC		R4, R0, #3							// R4 = reg_offset
  b4:	e3c04003 	bic	r4, r0, #3
				LDR		R2, =MPCORE_GIC_DIST+ICDIPTR
  b8:	e59f2020 	ldr	r2, [pc, #32]	; e0 <HPS_WATCHDOG1_IRQ+0x14>
				ADD		R4, R2, R4							// R4 = word address of ICDIPTR
  bc:	e0824004 	add	r4, r2, r4
    			AND		R2, R0, #0x3						// N mod 4
  c0:	e2002003 	and	r2, r0, #3
				ADD		R4, R2, R4							// R4 = byte address in ICDIPTR
  c4:	e0824004 	add	r4, r2, r4

				/* now that we have the register address (R4) and value (R2), write to (only)
				 * the appropriate byte */
				STRB		R1, [R4]
  c8:	e5c41000 	strb	r1, [r4]
    
    			POP		{R4-R5, PC}
  cc:	e8bd8030 	pop	{r4, r5, pc}
  d0:	fffec100 	.word	0xfffec100
  d4:	0000ffff 	.word	0x0000ffff
  d8:	fffed000 	.word	0xfffed000
  dc:	fffed100 	.word	0xfffed100
  e0:	fffed800 	.word	0xfffed800

000000e4 <KEY_ISR>:
 * This routine checks which KEY has been pressed. It writes to HEX0
 ***************************************************************************************/
				
				.global	KEY_ISR
KEY_ISR:		
				LDR		R0, =KEY_BASE			// base address of pushbutton KEY port
  e4:	e59f0060 	ldr	r0, [pc, #96]	; 14c <END_KEY_ISR+0x4>
				LDR		R1, [R0, #0xC]			// read edge capture register
  e8:	e590100c 	ldr	r1, [r0, #12]
				MOV		R2, #0xF
  ec:	e3a0200f 	mov	r2, #15
				STR		R2, [R0, #0xC]			// clear the interrupt
  f0:	e580200c 	str	r2, [r0, #12]

				LDR		R0, =HEX3_HEX0_BASE	// based address of HEX display
  f4:	e59f0054 	ldr	r0, [pc, #84]	; 150 <END_KEY_ISR+0x8>

000000f8 <CHECK_KEY0>:
CHECK_KEY0:
				MOV		R3, #0x1
  f8:	e3a03001 	mov	r3, #1
				ANDS		R3, R3, R1				// check for KEY0
  fc:	e0133001 	ands	r3, r3, r1
				BEQ		CHECK_KEY1
 100:	0a000002 	beq	110 <CHECK_KEY1>
				MOV		R2, #0b00111111
 104:	e3a0203f 	mov	r2, #63	; 0x3f
				STR		R2, [R0]					// display "0"
 108:	e5802000 	str	r2, [r0]
				B			END_KEY_ISR
 10c:	ea00000d 	b	148 <END_KEY_ISR>

00000110 <CHECK_KEY1>:
CHECK_KEY1:
				MOV		R3, #0x2
 110:	e3a03002 	mov	r3, #2
				ANDS		R3, R3, R1				// check for KEY1
 114:	e0133001 	ands	r3, r3, r1
				BEQ		CHECK_KEY2
 118:	0a000002 	beq	128 <CHECK_KEY2>
				MOV		R2, #0b00000110
 11c:	e3a02006 	mov	r2, #6
				STR		R2, [R0]					// display "1"
 120:	e5802000 	str	r2, [r0]
				B			END_KEY_ISR
 124:	ea000007 	b	148 <END_KEY_ISR>

00000128 <CHECK_KEY2>:
CHECK_KEY2:
				MOV		R3, #0x4
 128:	e3a03004 	mov	r3, #4
				ANDS		R3, R3, R1				// check for KEY2
 12c:	e0133001 	ands	r3, r3, r1
				BEQ		IS_KEY3
 130:	0a000002 	beq	140 <IS_KEY3>
				MOV		R2, #0b01011011
 134:	e3a0205b 	mov	r2, #91	; 0x5b
				STR		R2, [R0]					// display "2"
 138:	e5802000 	str	r2, [r0]
				B			END_KEY_ISR
 13c:	ea000001 	b	148 <END_KEY_ISR>

00000140 <IS_KEY3>:
IS_KEY3:
				MOV		R2, #0b01001111
 140:	e3a0204f 	mov	r2, #79	; 0x4f
				STR		R2, [R0]					// display "3"
 144:	e5802000 	str	r2, [r0]

00000148 <END_KEY_ISR>:
END_KEY_ISR:
				BX			LR
 148:	e12fff1e 	bx	lr
 14c:	ff200050 	.word	0xff200050
 150:	ff200020 	.word	0xff200020

00000154 <interrupt_counter>:
				B 			SERVICE_SVC				// software interrrupt vector
				B 			SERVICE_ABT_INST		// aborted prefetch vector
				B 			SERVICE_ABT_DATA		// aborted data vector
				.word 	0							// unused vector
				B 			SERVICE_IRQ				// IRQ interrupt vector
				B 			SERVICE_FIQ				// FIQ interrupt vector
 154:	00000000 	.word	0x00000000

00000158 <CHAR_FLAG>:
 158:	00000000 	.word	0x00000000

0000015c <CHAR_BUFFER>:
 15c:	00000000 	.word	0x00000000

00000160 <LARGE_NUMBER>:
 160:	02faf080 	.word	0x02faf080

00000164 <CURRENT_PID>:
 164:	00000000 	.word	0x00000000

00000168 <PD_ARRAY>:
 168:	deadbeef 	.word	0xdeadbeef
 16c:	deadbeef 	.word	0xdeadbeef
 170:	deadbeef 	.word	0xdeadbeef
 174:	deadbeef 	.word	0xdeadbeef
 178:	deadbeef 	.word	0xdeadbeef
 17c:	deadbeef 	.word	0xdeadbeef
 180:	deadbeef 	.word	0xdeadbeef
 184:	deadbeef 	.word	0xdeadbeef
 188:	deadbeef 	.word	0xdeadbeef
 18c:	deadbeef 	.word	0xdeadbeef
 190:	deadbeef 	.word	0xdeadbeef
 194:	deadbeef 	.word	0xdeadbeef
 198:	deadbeef 	.word	0xdeadbeef
 19c:	deadbeef 	.word	0xdeadbeef
 1a0:	deadbeef 	.word	0xdeadbeef
 1a4:	deadbeef 	.word	0xdeadbeef
 1a8:	deadbeef 	.word	0xdeadbeef
 1ac:	deadbee1 	.word	0xdeadbee1
 1b0:	deadbee1 	.word	0xdeadbee1
 1b4:	deadbee1 	.word	0xdeadbee1
 1b8:	deadbee1 	.word	0xdeadbee1
 1bc:	deadbee1 	.word	0xdeadbee1
 1c0:	deadbee1 	.word	0xdeadbee1
 1c4:	deadbee1 	.word	0xdeadbee1
 1c8:	deadbee1 	.word	0xdeadbee1
 1cc:	deadbee1 	.word	0xdeadbee1
 1d0:	deadbee1 	.word	0xdeadbee1
 1d4:	deadbee1 	.word	0xdeadbee1
 1d8:	deadbee1 	.word	0xdeadbee1
 1dc:	deadbee1 	.word	0xdeadbee1
 1e0:	3f000000 	.word	0x3f000000
 1e4:	00000000 	.word	0x00000000
 1e8:	00000298 	.word	0x00000298
 1ec:	00000053 	.word	0x00000053

000001f0 <_start>:
                            .word PROC1+4 // PC
                            .word 0x53 // CPSR (0x53 means IRQ enabled, mode = SVC)

_start:		
				/* Set up stack pointers for IRQ and SVC processor modes */
				MOV		R1, #0b11010010					// interrupts masked, MODE = IRQ
 1f0:	e3a010d2 	mov	r1, #210	; 0xd2
				MSR		CPSR_c, R1							// change to IRQ mode
 1f4:	e121f001 	msr	CPSR_c, r1
				LDR		SP, =A9_ONCHIP_END - 3			// set IRQ stack to top of A9 onchip memory
 1f8:	e3e0d003 	mvn	sp, #3
				/* Change to SVC (supervisor) mode with interrupts disabled */
				MOV		R1, #0b11010011					// interrupts masked, MODE = SVC
 1fc:	e3a010d3 	mov	r1, #211	; 0xd3
				MSR		CPSR, R1								// change to supervisor mode
 200:	e129f001 	msr	CPSR_fc, r1
				LDR		SP, =DDR_END - 3					// set SVC stack to top of DDR3 memory
 204:	e3e0d10f 	mvn	sp, #-1073741821	; 0xc0000003

				BL			CONFIG_GIC							// configure the ARM generic interrupt controller
 208:	ebffff8c 	bl	40 <CONFIG_GIC>
        
				// write to the pushbutton KEY interrupt mask register
				LDR		R0, =KEY_BASE						// pushbutton KEY base address
 20c:	e59f0210 	ldr	r0, [pc, #528]	; 424 <SERVICE_FIQ+0x4>
				MOV		R1, #0xF								// set interrupt mask bits
 210:	e3a0100f 	mov	r1, #15
				STR		R1, [R0, #0x8]						// interrupt mask register is (base + 8
 214:	e5801008 	str	r1, [r0, #8]

        //enable timer
				LDR   R0, =MPCORE_PRIV_TIMER
 218:	e59f0208 	ldr	r0, [pc, #520]	; 428 <__cs3_region_init_size_ram>
				LDR   R1, =100000000
 21c:	e59f1208 	ldr	r1, [pc, #520]	; 42c <__cs3_region_init_size_ram+0x4>
				STR	  R1, [R0,#0]
 220:	e5801000 	str	r1, [r0]
				LDR	  R1, =0b0000000000000111
 224:	e3a01007 	mov	r1, #7
				STR   R1, [R0,#0x8]
 228:	e5801008 	str	r1, [r0, #8]
        
        //enable keyboard
        LDR   R0, =JTAG_UART_BASE
 22c:	e59f01fc 	ldr	r0, [pc, #508]	; 430 <__cs3_region_init_size_ram+0x8>
        MOV   R1, #1
 230:	e3a01001 	mov	r1, #1
        STR   R1, [R0,#4]
 234:	e5801004 	str	r1, [r0, #4]
               
				// enable IRQ interrupts in the processor
				MOV		R0, #0b01010011					// IRQ unmasked, MODE = SVC
 238:	e3a00053 	mov	r0, #83	; 0x53
				MSR		CPSR_c, R0
 23c:	e121f000 	msr	CPSR_c, r0

00000240 <IDLE>:
        

        
IDLE:
    		PUSH		{R0-R7, LR}							//push register values and LR
 240:	e92d40ff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
        
        LDR R4, =CHAR_FLAG									//R4 = CHAR_FLAG address
 244:	e59f41e8 	ldr	r4, [pc, #488]	; 434 <__cs3_region_init_size_ram+0xc>
        LDR R5, [R4]										//Loads value of CHAR_FLAG	
 248:	e5945000 	ldr	r5, [r4]
        CMP R5, #1								 			//checks if CHAR_FLAG = 1
 24c:	e3550001 	cmp	r5, #1
        BEQ CHECK_FLAG										//branch to CHECK_FLAG
 250:	0a000001 	beq	25c <CHECK_FLAG>

00000254 <RETURN_FLAG>:
RETURN_FLAG:        
        POP		{R0-R7, LR}									//pop register values and LR
 254:	e8bd40ff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
        B 			IDLE									// main program simply idles
 258:	eafffff8 	b	240 <IDLE>

0000025c <CHECK_FLAG>:
        
CHECK_FLAG:
        LDR R4, =CHAR_BUFFER								//R4 = CHAR_BUFFER address
 25c:	e59f41d4 	ldr	r4, [pc, #468]	; 438 <__cs3_region_init_size_ram+0x10>
        LDR R0, [R4]										//retrieves character in buffer
 260:	e5940000 	ldr	r0, [r4]
        BL PUT_JTAG											//branch and link to PUT_JTAG
 264:	eb000003 	bl	278 <PUT_JTAG>
        LDR R4, =CHAR_FLAG									//R4 = CHAR_FLAG address
 268:	e59f41c4 	ldr	r4, [pc, #452]	; 434 <__cs3_region_init_size_ram+0xc>
        MOV R5, #0											//R5 set to 0
 26c:	e3a05000 	mov	r5, #0
        STR R5, [R4]										//CHAR_FLAG set to 0
 270:	e5845000 	str	r5, [r4]
        B RETURN_FLAG										//branches to return flag
 274:	eafffff6 	b	254 <RETURN_FLAG>

00000278 <PUT_JTAG>:
        
PUT_JTAG: 					//taken from lab10 pdf 
        LDR R1, =0xFF201000 // JTAG UART base address
 278:	e59f11b0 	ldr	r1, [pc, #432]	; 430 <__cs3_region_init_size_ram+0x8>
        LDR R2, [R1, #4] // read the JTAG UART control register
 27c:	e5912004 	ldr	r2, [r1, #4]
        LDR R3, =0xFFFF
 280:	e59f31b4 	ldr	r3, [pc, #436]	; 43c <__cs3_region_init_size_ram+0x14>
        ANDS R2, R2, R3 // check for write space
 284:	e0122003 	ands	r2, r2, r3
        BEQ END_PUT // if no space, ignore the character
 288:	0a000000 	beq	290 <END_PUT>
        STR R0, [R1] // send the character
 28c:	e5810000 	str	r0, [r1]

00000290 <END_PUT>:
END_PUT: BX LR
 290:	e12fff1e 	bx	lr

00000294 <PROC1>:
       
PROC1:	
		MOV R2, #0
 294:	e3a02000 	mov	r2, #0
		LDR R1, =LEDR_BASE
 298:	e59f11a0 	ldr	r1, [pc, #416]	; 440 <__cs3_region_init_size_ram+0x18>

0000029c <PROC1_LOOP_1>:
PROC1_LOOP_1:
		ADD R2, R2, #1
 29c:	e2822001 	add	r2, r2, #1
		STR R2, [R1]
 2a0:	e5812000 	str	r2, [r1]
		MOV R3, #0
 2a4:	e3a03000 	mov	r3, #0

000002a8 <PROC1_LOOP_2>:
PROC1_LOOP_2:
		ADD R3, R3, #1
 2a8:	e2833001 	add	r3, r3, #1
    LDR R0, =LARGE_NUMBER
 2ac:	e59f0190 	ldr	r0, [pc, #400]	; 444 <__cs3_region_init_size_ram+0x1c>
		CMP R3, R0
 2b0:	e1530000 	cmp	r3, r0
		BLT PROC1_LOOP_2
 2b4:	bafffffb 	blt	2a8 <PROC1_LOOP_2>
		B PROC1_LOOP_1
 2b8:	eafffff7 	b	29c <PROC1_LOOP_1>

000002bc <SERVICE_UND>:

/* Define the exception service routines */

/*--- Undefined instructions --------------------------------------------------*/
SERVICE_UND:
    			B SERVICE_UND 
 2bc:	eafffffe 	b	2bc <SERVICE_UND>

000002c0 <SERVICE_SVC>:
 
/*--- Software interrupts -----------------------------------------------------*/
SERVICE_SVC:			
    			B SERVICE_SVC 
 2c0:	eafffffe 	b	2c0 <SERVICE_SVC>

000002c4 <SERVICE_ABT_DATA>:

/*--- Aborted data reads ------------------------------------------------------*/
SERVICE_ABT_DATA:
    			B SERVICE_ABT_DATA 
 2c4:	eafffffe 	b	2c4 <SERVICE_ABT_DATA>

000002c8 <SERVICE_ABT_INST>:

/*--- Aborted instruction fetch -----------------------------------------------*/
SERVICE_ABT_INST:
    			B SERVICE_ABT_INST 
 2c8:	eafffffe 	b	2c8 <SERVICE_ABT_INST>

000002cc <SERVICE_IRQ>:
 
/*--- IRQ ---------------------------------------------------------------------*/
SERVICE_IRQ:
    			PUSH		{R0-R7, LR}
 2cc:	e92d40ff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
    
    			/* Read the ICCIAR from the CPU interface */
    			LDR		R4, =MPCORE_GIC_CPUIF
 2d0:	e59f4170 	ldr	r4, [pc, #368]	; 448 <__cs3_region_init_size_ram+0x20>
    			LDR		R5, [R4, #ICCIAR]				// read from ICCIAR
 2d4:	e594500c 	ldr	r5, [r4, #12]

000002d8 <FPGA_IRQ1_HANDLER>:
          
FPGA_IRQ1_HANDLER:
    			CMP		R5, #KEYS_IRQ
 2d8:	e3550049 	cmp	r5, #73	; 0x49
          BEQ   KEY_HANDLER
 2dc:	0a000004 	beq	2f4 <KEY_HANDLER>

000002e0 <FPGA_IRQ2_HANDLER>:
          
FPGA_IRQ2_HANDLER:          
          CMP   R5, #MPCORE_PRIV_TIMER_IRQ
 2e0:	e355001d 	cmp	r5, #29
          BEQ   TIMER_HANDLER
 2e4:	0a000004 	beq	2fc <TIMER_HANDLER>

000002e8 <FPGA_IRQ3_HANDLER>:
          
FPGA_IRQ3_HANDLER:
          CMP   R5, #JTAG_IRQ
 2e8:	e3550050 	cmp	r5, #80	; 0x50
          BEQ   JTAG_HANDLER
 2ec:	0a00003f 	beq	3f0 <JTAG_HANDLER>

000002f0 <UNEXPECTED>:
          
UNEXPECTED:	BNE		UNEXPECTED    					// if not recognized, stop here
 2f0:	1afffffe 	bne	2f0 <UNEXPECTED>

000002f4 <KEY_HANDLER>:
  
KEY_HANDLER:
    			BL			KEY_ISR
 2f4:	ebffff7a 	bl	e4 <KEY_ISR>
          B       EXIT_IRQ
 2f8:	ea000045 	b	414 <EXIT_IRQ>

000002fc <TIMER_HANDLER>:
TIMER_HANDLER:
          LDR R0, =CURRENT_PID
 2fc:	e59f0148 	ldr	r0, [pc, #328]	; 44c <__cs3_region_init_size_ram+0x24>
          LDR R1, [R0]
 300:	e5901000 	ldr	r1, [r0]
          MVN R1, R1
 304:	e1e01001 	mvn	r1, r1
          STR R1, [R0]
 308:	e5801000 	str	r1, [r0]
          CMP R1, #0
 30c:	e3510000 	cmp	r1, #0
          LDR R0, =PD_ARRAY
 310:	e59f0138 	ldr	r0, [pc, #312]	; 450 <__cs3_region_init_size_ram+0x28>
          BEQ ADD1_68
 314:	0a000000 	beq	31c <ADD1_68>
          B   ADD1_0
 318:	ea000000 	b	320 <ADD1_0>

0000031c <ADD1_68>:
ADD1_68:
          ADD R0,R0,#68
 31c:	e2800044 	add	r0, r0, #68	; 0x44

00000320 <ADD1_0>:
ADD1_0:
          STR R8 , [R0,#32]   //R8
 320:	e5808020 	str	r8, [r0, #32]
          STR R9 , [R0,#36]   //R9
 324:	e5809024 	str	r9, [r0, #36]	; 0x24
          STR R10, [R0,#40]   //R10
 328:	e580a028 	str	r10, [r0, #40]	; 0x28
          STR R11, [R0,#44]   //R11
 32c:	e580b02c 	str	r11, [r0, #44]	; 0x2c
          STR R12, [R0,#48]   //R12
 330:	e580c030 	str	r12, [r0, #48]	; 0x30
          MRS R1 , SPSR
 334:	e14f1000 	mrs	r1, SPSR
          STR R1 , [R0,#64]   //CPSR
 338:	e5801040 	str	r1, [r0, #64]	; 0x40
          MOV R8, R0
 33c:	e1a08000 	mov	r8, r0
          POP	{R0-R7, LR}
 340:	e8bd40ff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
          STR R0 , [R8,#0 ]   //R0
 344:	e5880000 	str	r0, [r8]
          STR R1 , [R8,#4 ]   //R1
 348:	e5881004 	str	r1, [r8, #4]
          STR R2 , [R8,#8 ]   //R2
 34c:	e5882008 	str	r2, [r8, #8]
          STR R3 , [R8,#12]   //R3
 350:	e588300c 	str	r3, [r8, #12]
          STR R4 , [R8,#16]   //R4
 354:	e5884010 	str	r4, [r8, #16]
          STR R5 , [R8,#20]   //R5
 358:	e5885014 	str	r5, [r8, #20]
          STR R6 , [R8,#24]   //R6
 35c:	e5886018 	str	r6, [r8, #24]
          STR R7 , [R8,#28]   //R7
 360:	e588701c 	str	r7, [r8, #28]
          STR LR , [R0,#60]   //R15
 364:	e580e03c 	str	lr, [r0, #60]	; 0x3c
          MOV R9 , #0b11010011					// interrupts masked, MODE = SVC
 368:	e3a090d3 	mov	r9, #211	; 0xd3
          MSR	CPSR, R9								// change to supervisor mode
 36c:	e129f009 	msr	CPSR_fc, r9
          STR SP , [R0,#52]   //R13
 370:	e580d034 	str	sp, [r0, #52]	; 0x34
          STR LR , [R0,#56]   //R14
 374:	e580e038 	str	lr, [r0, #56]	; 0x38
          MOV	R9 , #0b11010010					// interrupts masked, MODE = IRQ
 378:	e3a090d2 	mov	r9, #210	; 0xd2
          MSR	CPSR_c, R9							// change to IRQ mode
 37c:	e121f009 	msr	CPSR_c, r9
          
          LDR R0, =CURRENT_PID
 380:	e59f00c4 	ldr	r0, [pc, #196]	; 44c <__cs3_region_init_size_ram+0x24>
          LDR R1, [R0]
 384:	e5901000 	ldr	r1, [r0]
          CMP R1, #0
 388:	e3510000 	cmp	r1, #0
          LDR R0, =PD_ARRAY
 38c:	e59f00bc 	ldr	r0, [pc, #188]	; 450 <__cs3_region_init_size_ram+0x28>
          BEQ ADD2_0
 390:	0a000001 	beq	39c <ADD2_0>
          B   ADD2_68
 394:	eaffffff 	b	398 <ADD2_68>

00000398 <ADD2_68>:
ADD2_68:
          ADD R0,R0,#68
 398:	e2800044 	add	r0, r0, #68	; 0x44

0000039c <ADD2_0>:
ADD2_0:   
          MOV	R1, #0b11010011					// interrupts masked, MODE = SVC
 39c:	e3a010d3 	mov	r1, #211	; 0xd3
          MSR	CPSR, R1								// change to supervisor mode
 3a0:	e129f001 	msr	CPSR_fc, r1
          LDR sp , [R0,#52]   //R13
 3a4:	e590d034 	ldr	sp, [r0, #52]	; 0x34
          LDR lr , [R0,#56]   //R14
 3a8:	e590e038 	ldr	lr, [r0, #56]	; 0x38
          /*MOV	R1 , #0b11010010					// interrupts masked, MODE = IRQ
          MSR	CPSR_c, R1							// change to IRQ mode*/
         // LDR
          LDR R1 , [R0,#64]   //SPSR
 3ac:	e5901040 	ldr	r1, [r0, #64]	; 0x40
          MSR SPSR, R0
 3b0:	e169f000 	msr	SPSR_fc, r0
          LDR R1 , [R0,#4 ]   //R1
 3b4:	e5901004 	ldr	r1, [r0, #4]
          LDR R2 , [R0,#8 ]   //R2
 3b8:	e5902008 	ldr	r2, [r0, #8]
          LDR R3 , [R0,#12]   //R3
 3bc:	e590300c 	ldr	r3, [r0, #12]
          LDR R4 , [R0,#16]   //R4
 3c0:	e5904010 	ldr	r4, [r0, #16]
          LDR R5 , [R0,#20]   //R5
 3c4:	e5905014 	ldr	r5, [r0, #20]
          LDR R6 , [R0,#24]   //R6
 3c8:	e5906018 	ldr	r6, [r0, #24]
          LDR R7 , [R0,#28]   //R7
 3cc:	e590701c 	ldr	r7, [r0, #28]
          LDR R8 , [R0,#32]   //R8
 3d0:	e5908020 	ldr	r8, [r0, #32]
          LDR R9 , [R0,#36]   //R9
 3d4:	e5909024 	ldr	r9, [r0, #36]	; 0x24
          LDR R10, [R0,#40]   //R10
 3d8:	e590a028 	ldr	r10, [r0, #40]	; 0x28
          LDR R11, [R0,#44]   //R11
 3dc:	e590b02c 	ldr	r11, [r0, #44]	; 0x2c
          LDR R12, [R0,#48]   //R12
 3e0:	e590c030 	ldr	r12, [r0, #48]	; 0x30
          LDR R0 , [R0,#0 ]   //R0
 3e4:	e5900000 	ldr	r0, [r0]
          SUBS PC, LR, #4     //R15, CPSR
 3e8:	e25ef004 	subs	pc, lr, #4
/*          PUSH		{R0-R7, LR}
          LDR		R4, =MPCORE_GIC_CPUIF
    			LDR		R5, [R4, #ICCIAR]				// read from ICCIAR*/
          B       EXIT_IRQ
 3ec:	ea000008 	b	414 <EXIT_IRQ>

000003f0 <JTAG_HANDLER>:
JTAG_HANDLER:
          LDR R0, =CHAR_FLAG						//loads character flag address
 3f0:	e59f003c 	ldr	r0, [pc, #60]	; 434 <__cs3_region_init_size_ram+0xc>
          MOV R1, #1								//sets R1 to 1
 3f4:	e3a01001 	mov	r1, #1
          STR R1, [R0]								//sets flag to 1
 3f8:	e5801000 	str	r1, [r0]
          
          LDR R3, =JTAG_UART_BASE					//loads address of JTAG_UART_BASE
 3fc:	e59f302c 	ldr	r3, [pc, #44]	; 430 <__cs3_region_init_size_ram+0x8>
          LDR R2, [R3]								//loads inputted character
 400:	e5932000 	ldr	r2, [r3]
          LDR R1, =0b011111111						//R1 set to 011111111
 404:	e3a010ff 	mov	r1, #255	; 0xff
          AND R2, R2, R1							//R2 and R1 anded
 408:	e0022001 	and	r2, r2, r1
          LDR R0, =CHAR_BUFFER						//loads address of character buffer
 40c:	e59f0024 	ldr	r0, [pc, #36]	; 438 <__cs3_region_init_size_ram+0x10>
          STR R2, [R0]								//stores inputted character into character buffer
 410:	e5802000 	str	r2, [r0]

00000414 <EXIT_IRQ>:
          
          
EXIT_IRQ:
    			/* Write to the End of Interrupt Register (ICCEOIR) */
    			STR		R5, [R4, #ICCEOIR]			// write to ICCEOIR
 414:	e5845010 	str	r5, [r4, #16]
    
    			POP		{R0-R7, LR}
 418:	e8bd40ff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
    			SUBS		PC, LR, #4
 41c:	e25ef004 	subs	pc, lr, #4

00000420 <SERVICE_FIQ>:

/*--- FIQ ---------------------------------------------------------------------*/
SERVICE_FIQ:
    			B			SERVICE_FIQ 
 420:	eafffffe 	b	420 <SERVICE_FIQ>
 424:	ff200050 	.word	0xff200050
 428:	fffec600 	.word	0xfffec600
 42c:	05f5e100 	.word	0x05f5e100
 430:	ff201000 	.word	0xff201000
 434:	00000158 	.word	0x00000158
 438:	0000015c 	.word	0x0000015c
 43c:	0000ffff 	.word	0x0000ffff
 440:	ff200000 	.word	0xff200000
 444:	00000160 	.word	0x00000160
 448:	fffec100 	.word	0xfffec100
 44c:	00000164 	.word	0x00000164
 450:	00000168 	.word	0x00000168
